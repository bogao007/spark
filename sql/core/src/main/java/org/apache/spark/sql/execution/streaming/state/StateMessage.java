// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/apache/spark/sql/execution/streaming/StateMessage.proto

// Protobuf Java Version: 3.25.2
package org.apache.spark.sql.execution.streaming.state;

public final class StateMessage {
  private StateMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code org.apache.spark.sql.execution.streaming.state.HandleState}
   */
  public enum HandleState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CREATED = 0;</code>
     */
    CREATED(0),
    /**
     * <code>INITIALIZED = 1;</code>
     */
    INITIALIZED(1),
    /**
     * <code>DATA_PROCESSED = 2;</code>
     */
    DATA_PROCESSED(2),
    /**
     * <code>CLOSED = 3;</code>
     */
    CLOSED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>CREATED = 0;</code>
     */
    public static final int CREATED_VALUE = 0;
    /**
     * <code>INITIALIZED = 1;</code>
     */
    public static final int INITIALIZED_VALUE = 1;
    /**
     * <code>DATA_PROCESSED = 2;</code>
     */
    public static final int DATA_PROCESSED_VALUE = 2;
    /**
     * <code>CLOSED = 3;</code>
     */
    public static final int CLOSED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HandleState valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HandleState forNumber(int value) {
      switch (value) {
        case 0: return CREATED;
        case 1: return INITIALIZED;
        case 2: return DATA_PROCESSED;
        case 3: return CLOSED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HandleState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HandleState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HandleState>() {
            public HandleState findValueByNumber(int number) {
              return HandleState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.getDescriptor().getEnumTypes().get(0);
    }

    private static final HandleState[] VALUES = values();

    public static HandleState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HandleState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.apache.spark.sql.execution.streaming.state.HandleState)
  }

  public interface StateRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StateRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
     * @return Whether the statefulProcessorHandleCall field is set.
     */
    boolean hasStatefulProcessorHandleCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
     * @return The statefulProcessorHandleCall.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall getStatefulProcessorHandleCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCallOrBuilder getStatefulProcessorHandleCallOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
     * @return Whether the listStateCall field is set.
     */
    boolean hasListStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
     * @return The listStateCall.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getListStateCall();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder getListStateCallOrBuilder();

    org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateRequest}
   */
  public static final class StateRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StateRequest)
      StateRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateRequest.newBuilder() to construct.
    private StateRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateRequest();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.Builder.class);
    }

    private int methodCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      STATEFULPROCESSORHANDLECALL(2),
      LISTSTATECALL(3),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 2: return STATEFULPROCESSORHANDLECALL;
          case 3: return LISTSTATECALL;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_ = 0;
    /**
     * <code>int32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }

    public static final int STATEFULPROCESSORHANDLECALL_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
     * @return Whether the statefulProcessorHandleCall field is set.
     */
    @java.lang.Override
    public boolean hasStatefulProcessorHandleCall() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
     * @return The statefulProcessorHandleCall.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall getStatefulProcessorHandleCall() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCallOrBuilder getStatefulProcessorHandleCallOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance();
    }

    public static final int LISTSTATECALL_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
     * @return Whether the listStateCall field is set.
     */
    @java.lang.Override
    public boolean hasListStateCall() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
     * @return The listStateCall.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getListStateCall() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder getListStateCallOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (version_ != 0) {
        output.writeInt32(1, version_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (version_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, version_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest) obj;

      if (getVersion()
          != other.getVersion()) return false;
      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 2:
          if (!getStatefulProcessorHandleCall()
              .equals(other.getStatefulProcessorHandleCall())) return false;
          break;
        case 3:
          if (!getListStateCall()
              .equals(other.getListStateCall())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion();
      switch (methodCase_) {
        case 2:
          hash = (37 * hash) + STATEFULPROCESSORHANDLECALL_FIELD_NUMBER;
          hash = (53 * hash) + getStatefulProcessorHandleCall().hashCode();
          break;
        case 3:
          hash = (37 * hash) + LISTSTATECALL_FIELD_NUMBER;
          hash = (53 * hash) + getListStateCall().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StateRequest)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        version_ = 0;
        if (statefulProcessorHandleCallBuilder_ != null) {
          statefulProcessorHandleCallBuilder_.clear();
        }
        if (listStateCallBuilder_ != null) {
          listStateCallBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.version_ = version_;
        }
      }

      private void buildPartialOneofs(org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest result) {
        result.methodCase_ = methodCase_;
        result.method_ = this.method_;
        if (methodCase_ == 2 &&
            statefulProcessorHandleCallBuilder_ != null) {
          result.method_ = statefulProcessorHandleCallBuilder_.build();
        }
        if (methodCase_ == 3 &&
            listStateCallBuilder_ != null) {
          result.method_ = listStateCallBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest.getDefaultInstance()) return this;
        if (other.getVersion() != 0) {
          setVersion(other.getVersion());
        }
        switch (other.getMethodCase()) {
          case STATEFULPROCESSORHANDLECALL: {
            mergeStatefulProcessorHandleCall(other.getStatefulProcessorHandleCall());
            break;
          }
          case LISTSTATECALL: {
            mergeListStateCall(other.getListStateCall());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                version_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getStatefulProcessorHandleCallFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getListStateCallFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int version_ ;
      /**
       * <code>int32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return version_;
      }
      /**
       * <code>int32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {

        version_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCallOrBuilder> statefulProcessorHandleCallBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       * @return Whether the statefulProcessorHandleCall field is set.
       */
      @java.lang.Override
      public boolean hasStatefulProcessorHandleCall() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       * @return The statefulProcessorHandleCall.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall getStatefulProcessorHandleCall() {
        if (statefulProcessorHandleCallBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return statefulProcessorHandleCallBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       */
      public Builder setStatefulProcessorHandleCall(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall value) {
        if (statefulProcessorHandleCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          statefulProcessorHandleCallBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       */
      public Builder setStatefulProcessorHandleCall(
          org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.Builder builderForValue) {
        if (statefulProcessorHandleCallBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          statefulProcessorHandleCallBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       */
      public Builder mergeStatefulProcessorHandleCall(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall value) {
        if (statefulProcessorHandleCallBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            statefulProcessorHandleCallBuilder_.mergeFrom(value);
          } else {
            statefulProcessorHandleCallBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       */
      public Builder clearStatefulProcessorHandleCall() {
        if (statefulProcessorHandleCallBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          statefulProcessorHandleCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.Builder getStatefulProcessorHandleCallBuilder() {
        return getStatefulProcessorHandleCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCallOrBuilder getStatefulProcessorHandleCallOrBuilder() {
        if ((methodCase_ == 2) && (statefulProcessorHandleCallBuilder_ != null)) {
          return statefulProcessorHandleCallBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall statefulProcessorHandleCall = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCallOrBuilder> 
          getStatefulProcessorHandleCallFieldBuilder() {
        if (statefulProcessorHandleCallBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance();
          }
          statefulProcessorHandleCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCallOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();
        return statefulProcessorHandleCallBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder> listStateCallBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       * @return Whether the listStateCall field is set.
       */
      @java.lang.Override
      public boolean hasListStateCall() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       * @return The listStateCall.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getListStateCall() {
        if (listStateCallBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return listStateCallBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       */
      public Builder setListStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall value) {
        if (listStateCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          listStateCallBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       */
      public Builder setListStateCall(
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder builderForValue) {
        if (listStateCallBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          listStateCallBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       */
      public Builder mergeListStateCall(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall value) {
        if (listStateCallBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            listStateCallBuilder_.mergeFrom(value);
          } else {
            listStateCallBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       */
      public Builder clearListStateCall() {
        if (listStateCallBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          listStateCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder getListStateCallBuilder() {
        return getListStateCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder getListStateCallOrBuilder() {
        if ((methodCase_ == 3) && (listStateCallBuilder_ != null)) {
          return listStateCallBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.ListStateCall listStateCall = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder> 
          getListStateCallFieldBuilder() {
        if (listStateCallBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
          }
          listStateCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();
        return listStateCallBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StateRequest)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StateRequest)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateRequest>
        PARSER = new com.google.protobuf.AbstractParser<StateRequest>() {
      @java.lang.Override
      public StateRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StateRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StateResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StateResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 statusCode = 1;</code>
     * @return The statusCode.
     */
    int getStatusCode();

    /**
     * <code>string errorMessage = 2;</code>
     * @return The errorMessage.
     */
    java.lang.String getErrorMessage();
    /**
     * <code>string errorMessage = 2;</code>
     * @return The bytes for errorMessage.
     */
    com.google.protobuf.ByteString
        getErrorMessageBytes();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateResponse}
   */
  public static final class StateResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StateResponse)
      StateResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StateResponse.newBuilder() to construct.
    private StateResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StateResponse() {
      errorMessage_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StateResponse();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.Builder.class);
    }

    public static final int STATUSCODE_FIELD_NUMBER = 1;
    private int statusCode_ = 0;
    /**
     * <code>int32 statusCode = 1;</code>
     * @return The statusCode.
     */
    @java.lang.Override
    public int getStatusCode() {
      return statusCode_;
    }

    public static final int ERRORMESSAGE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object errorMessage_ = "";
    /**
     * <code>string errorMessage = 2;</code>
     * @return The errorMessage.
     */
    @java.lang.Override
    public java.lang.String getErrorMessage() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        errorMessage_ = s;
        return s;
      }
    }
    /**
     * <code>string errorMessage = 2;</code>
     * @return The bytes for errorMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorMessageBytes() {
      java.lang.Object ref = errorMessage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        errorMessage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (statusCode_ != 0) {
        output.writeInt32(1, statusCode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(errorMessage_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, errorMessage_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (statusCode_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, statusCode_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(errorMessage_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, errorMessage_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse) obj;

      if (getStatusCode()
          != other.getStatusCode()) return false;
      if (!getErrorMessage()
          .equals(other.getErrorMessage())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATUSCODE_FIELD_NUMBER;
      hash = (53 * hash) + getStatusCode();
      hash = (37 * hash) + ERRORMESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getErrorMessage().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StateResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StateResponse)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        statusCode_ = 0;
        errorMessage_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.statusCode_ = statusCode_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.errorMessage_ = errorMessage_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse.getDefaultInstance()) return this;
        if (other.getStatusCode() != 0) {
          setStatusCode(other.getStatusCode());
        }
        if (!other.getErrorMessage().isEmpty()) {
          errorMessage_ = other.errorMessage_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                statusCode_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                errorMessage_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int statusCode_ ;
      /**
       * <code>int32 statusCode = 1;</code>
       * @return The statusCode.
       */
      @java.lang.Override
      public int getStatusCode() {
        return statusCode_;
      }
      /**
       * <code>int32 statusCode = 1;</code>
       * @param value The statusCode to set.
       * @return This builder for chaining.
       */
      public Builder setStatusCode(int value) {

        statusCode_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 statusCode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatusCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        statusCode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object errorMessage_ = "";
      /**
       * <code>string errorMessage = 2;</code>
       * @return The errorMessage.
       */
      public java.lang.String getErrorMessage() {
        java.lang.Object ref = errorMessage_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          errorMessage_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @return The bytes for errorMessage.
       */
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        java.lang.Object ref = errorMessage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          errorMessage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @param value The errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        errorMessage_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorMessage() {
        errorMessage_ = getDefaultInstance().getErrorMessage();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>string errorMessage = 2;</code>
       * @param value The bytes for errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        errorMessage_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StateResponse)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StateResponse)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StateResponse>
        PARSER = new com.google.protobuf.AbstractParser<StateResponse>() {
      @java.lang.Override
      public StateResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StateResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StateResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StateResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StatefulProcessorHandleCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
     * @return Whether the setHandleState field is set.
     */
    boolean hasSetHandleState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
     * @return The setHandleState.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getSetHandleState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder getSetHandleStateOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
     * @return Whether the getListState field is set.
     */
    boolean hasGetListState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
     * @return The getListState.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState getGetListState();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetListStateOrBuilder getGetListStateOrBuilder();

    org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall}
   */
  public static final class StatefulProcessorHandleCall extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall)
      StatefulProcessorHandleCallOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StatefulProcessorHandleCall.newBuilder() to construct.
    private StatefulProcessorHandleCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StatefulProcessorHandleCall() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StatefulProcessorHandleCall();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.Builder.class);
    }

    private int methodCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SETHANDLESTATE(2),
      GETLISTSTATE(3),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 2: return SETHANDLESTATE;
          case 3: return GETLISTSTATE;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int SETHANDLESTATE_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
     * @return Whether the setHandleState field is set.
     */
    @java.lang.Override
    public boolean hasSetHandleState() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
     * @return The setHandleState.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getSetHandleState() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder getSetHandleStateOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
    }

    public static final int GETLISTSTATE_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
     * @return Whether the getListState field is set.
     */
    @java.lang.Override
    public boolean hasGetListState() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
     * @return The getListState.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState getGetListState() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListStateOrBuilder getGetListStateOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall other = (org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 2:
          if (!getSetHandleState()
              .equals(other.getSetHandleState())) return false;
          break;
        case 3:
          if (!getGetListState()
              .equals(other.getGetListState())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 2:
          hash = (37 * hash) + SETHANDLESTATE_FIELD_NUMBER;
          hash = (53 * hash) + getSetHandleState().hashCode();
          break;
        case 3:
          hash = (37 * hash) + GETLISTSTATE_FIELD_NUMBER;
          hash = (53 * hash) + getGetListState().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall)
        org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (setHandleStateBuilder_ != null) {
          setHandleStateBuilder_.clear();
        }
        if (getListStateBuilder_ != null) {
          getListStateBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall result = new org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall result) {
        result.methodCase_ = methodCase_;
        result.method_ = this.method_;
        if (methodCase_ == 2 &&
            setHandleStateBuilder_ != null) {
          result.method_ = setHandleStateBuilder_.build();
        }
        if (methodCase_ == 3 &&
            getListStateBuilder_ != null) {
          result.method_ = getListStateBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case SETHANDLESTATE: {
            mergeSetHandleState(other.getSetHandleState());
            break;
          }
          case GETLISTSTATE: {
            mergeGetListState(other.getGetListState());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                input.readMessage(
                    getSetHandleStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getGetListStateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder> setHandleStateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       * @return Whether the setHandleState field is set.
       */
      @java.lang.Override
      public boolean hasSetHandleState() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       * @return The setHandleState.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getSetHandleState() {
        if (setHandleStateBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return setHandleStateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       */
      public Builder setSetHandleState(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState value) {
        if (setHandleStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          setHandleStateBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       */
      public Builder setSetHandleState(
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder builderForValue) {
        if (setHandleStateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          setHandleStateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       */
      public Builder mergeSetHandleState(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState value) {
        if (setHandleStateBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            setHandleStateBuilder_.mergeFrom(value);
          } else {
            setHandleStateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       */
      public Builder clearSetHandleState() {
        if (setHandleStateBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          setHandleStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder getSetHandleStateBuilder() {
        return getSetHandleStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder getSetHandleStateOrBuilder() {
        if ((methodCase_ == 2) && (setHandleStateBuilder_ != null)) {
          return setHandleStateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.SetHandleState setHandleState = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder> 
          getSetHandleStateFieldBuilder() {
        if (setHandleStateBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
          }
          setHandleStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();
        return setHandleStateBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListStateOrBuilder> getListStateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       * @return Whether the getListState field is set.
       */
      @java.lang.Override
      public boolean hasGetListState() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       * @return The getListState.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState getGetListState() {
        if (getListStateBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return getListStateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       */
      public Builder setGetListState(org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState value) {
        if (getListStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getListStateBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       */
      public Builder setGetListState(
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.Builder builderForValue) {
        if (getListStateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getListStateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       */
      public Builder mergeGetListState(org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState value) {
        if (getListStateBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            getListStateBuilder_.mergeFrom(value);
          } else {
            getListStateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       */
      public Builder clearGetListState() {
        if (getListStateBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          getListStateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.Builder getGetListStateBuilder() {
        return getGetListStateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListStateOrBuilder getGetListStateOrBuilder() {
        if ((methodCase_ == 3) && (getListStateBuilder_ != null)) {
          return getListStateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.GetListState getListState = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListStateOrBuilder> 
          getGetListStateFieldBuilder() {
        if (getListStateBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance();
          }
          getListStateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListStateOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();
        return getListStateBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.StatefulProcessorHandleCall)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StatefulProcessorHandleCall>
        PARSER = new com.google.protobuf.AbstractParser<StatefulProcessorHandleCall>() {
      @java.lang.Override
      public StatefulProcessorHandleCall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<StatefulProcessorHandleCall> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StatefulProcessorHandleCall> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.StatefulProcessorHandleCall getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetListStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.GetListState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    java.lang.String getStateName();
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    com.google.protobuf.ByteString
        getStateNameBytes();

    /**
     * <code>string schema = 2;</code>
     * @return The schema.
     */
    java.lang.String getSchema();
    /**
     * <code>string schema = 2;</code>
     * @return The bytes for schema.
     */
    com.google.protobuf.ByteString
        getSchemaBytes();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.GetListState}
   */
  public static final class GetListState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.GetListState)
      GetListStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetListState.newBuilder() to construct.
    private GetListState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetListState() {
      stateName_ = "";
      schema_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetListState();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.class, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.Builder.class);
    }

    public static final int STATENAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object stateName_ = "";
    /**
     * <code>string stateName = 1;</code>
     * @return The stateName.
     */
    @java.lang.Override
    public java.lang.String getStateName() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stateName_ = s;
        return s;
      }
    }
    /**
     * <code>string stateName = 1;</code>
     * @return The bytes for stateName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStateNameBytes() {
      java.lang.Object ref = stateName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stateName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCHEMA_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object schema_ = "";
    /**
     * <code>string schema = 2;</code>
     * @return The schema.
     */
    @java.lang.Override
    public java.lang.String getSchema() {
      java.lang.Object ref = schema_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        schema_ = s;
        return s;
      }
    }
    /**
     * <code>string schema = 2;</code>
     * @return The bytes for schema.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSchemaBytes() {
      java.lang.Object ref = schema_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        schema_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stateName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schema_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, schema_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stateName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stateName_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(schema_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, schema_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState other = (org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) obj;

      if (!getStateName()
          .equals(other.getStateName())) return false;
      if (!getSchema()
          .equals(other.getSchema())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATENAME_FIELD_NUMBER;
      hash = (53 * hash) + getStateName().hashCode();
      hash = (37 * hash) + SCHEMA_FIELD_NUMBER;
      hash = (53 * hash) + getSchema().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.GetListState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.GetListState)
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetListStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.class, org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stateName_ = "";
        schema_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState result = new org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stateName_ = stateName_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.schema_ = schema_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState.getDefaultInstance()) return this;
        if (!other.getStateName().isEmpty()) {
          stateName_ = other.stateName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getSchema().isEmpty()) {
          schema_ = other.schema_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stateName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                schema_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object stateName_ = "";
      /**
       * <code>string stateName = 1;</code>
       * @return The stateName.
       */
      public java.lang.String getStateName() {
        java.lang.Object ref = stateName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stateName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @return The bytes for stateName.
       */
      public com.google.protobuf.ByteString
          getStateNameBytes() {
        java.lang.Object ref = stateName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stateName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        stateName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStateName() {
        stateName_ = getDefaultInstance().getStateName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>string stateName = 1;</code>
       * @param value The bytes for stateName to set.
       * @return This builder for chaining.
       */
      public Builder setStateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        stateName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object schema_ = "";
      /**
       * <code>string schema = 2;</code>
       * @return The schema.
       */
      public java.lang.String getSchema() {
        java.lang.Object ref = schema_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          schema_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string schema = 2;</code>
       * @return The bytes for schema.
       */
      public com.google.protobuf.ByteString
          getSchemaBytes() {
        java.lang.Object ref = schema_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          schema_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string schema = 2;</code>
       * @param value The schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchema(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        schema_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>string schema = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSchema() {
        schema_ = getDefaultInstance().getSchema();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>string schema = 2;</code>
       * @param value The bytes for schema to set.
       * @return This builder for chaining.
       */
      public Builder setSchemaBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        schema_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.GetListState)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.GetListState)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetListState>
        PARSER = new com.google.protobuf.AbstractParser<GetListState>() {
      @java.lang.Override
      public GetListState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<GetListState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetListState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetListState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ListStateCallOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.ListStateCall)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
     * @return Whether the exists field is set.
     */
    boolean hasExists();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
     * @return The exists.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
     * @return Whether the get field is set.
     */
    boolean hasGet();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
     * @return The get.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder();

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
     * @return Whether the update field is set.
     */
    boolean hasUpdate();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
     * @return The update.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.Update getUpdate();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.UpdateOrBuilder getUpdateOrBuilder();

    org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.MethodCase getMethodCase();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListStateCall}
   */
  public static final class ListStateCall extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.ListStateCall)
      ListStateCallOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ListStateCall.newBuilder() to construct.
    private ListStateCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ListStateCall() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ListStateCall();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder.class);
    }

    private int methodCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object method_;
    public enum MethodCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      EXISTS(1),
      GET(2),
      UPDATE(3),
      METHOD_NOT_SET(0);
      private final int value;
      private MethodCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MethodCase valueOf(int value) {
        return forNumber(value);
      }

      public static MethodCase forNumber(int value) {
        switch (value) {
          case 1: return EXISTS;
          case 2: return GET;
          case 3: return UPDATE;
          case 0: return METHOD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MethodCase
    getMethodCase() {
      return MethodCase.forNumber(
          methodCase_);
    }

    public static final int EXISTS_FIELD_NUMBER = 1;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
     * @return Whether the exists field is set.
     */
    @java.lang.Override
    public boolean hasExists() {
      return methodCase_ == 1;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
     * @return The exists.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder() {
      if (methodCase_ == 1) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
    }

    public static final int GET_FIELD_NUMBER = 2;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
     * @return Whether the get field is set.
     */
    @java.lang.Override
    public boolean hasGet() {
      return methodCase_ == 2;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
     * @return The get.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder() {
      if (methodCase_ == 2) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
    }

    public static final int UPDATE_FIELD_NUMBER = 3;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
     * @return Whether the update field is set.
     */
    @java.lang.Override
    public boolean hasUpdate() {
      return methodCase_ == 3;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
     * @return The update.
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Update getUpdate() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance();
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
     */
    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.UpdateOrBuilder getUpdateOrBuilder() {
      if (methodCase_ == 3) {
         return (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_;
      }
      return org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (methodCase_ == 1) {
        output.writeMessage(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_);
      }
      if (methodCase_ == 2) {
        output.writeMessage(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_);
      }
      if (methodCase_ == 3) {
        output.writeMessage(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (methodCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_);
      }
      if (methodCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_);
      }
      if (methodCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall other = (org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) obj;

      if (!getMethodCase().equals(other.getMethodCase())) return false;
      switch (methodCase_) {
        case 1:
          if (!getExists()
              .equals(other.getExists())) return false;
          break;
        case 2:
          if (!getGet()
              .equals(other.getGet())) return false;
          break;
        case 3:
          if (!getUpdate()
              .equals(other.getUpdate())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (methodCase_) {
        case 1:
          hash = (37 * hash) + EXISTS_FIELD_NUMBER;
          hash = (53 * hash) + getExists().hashCode();
          break;
        case 2:
          hash = (37 * hash) + GET_FIELD_NUMBER;
          hash = (53 * hash) + getGet().hashCode();
          break;
        case 3:
          hash = (37 * hash) + UPDATE_FIELD_NUMBER;
          hash = (53 * hash) + getUpdate().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.ListStateCall}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.ListStateCall)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCallOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.class, org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (existsBuilder_ != null) {
          existsBuilder_.clear();
        }
        if (getBuilder_ != null) {
          getBuilder_.clear();
        }
        if (updateBuilder_ != null) {
          updateBuilder_.clear();
        }
        methodCase_ = 0;
        method_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall result = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall result) {
        result.methodCase_ = methodCase_;
        result.method_ = this.method_;
        if (methodCase_ == 1 &&
            existsBuilder_ != null) {
          result.method_ = existsBuilder_.build();
        }
        if (methodCase_ == 2 &&
            getBuilder_ != null) {
          result.method_ = getBuilder_.build();
        }
        if (methodCase_ == 3 &&
            updateBuilder_ != null) {
          result.method_ = updateBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall.getDefaultInstance()) return this;
        switch (other.getMethodCase()) {
          case EXISTS: {
            mergeExists(other.getExists());
            break;
          }
          case GET: {
            mergeGet(other.getGet());
            break;
          }
          case UPDATE: {
            mergeUpdate(other.getUpdate());
            break;
          }
          case METHOD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExistsFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getGetFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getUpdateFieldBuilder().getBuilder(),
                    extensionRegistry);
                methodCase_ = 3;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int methodCase_ = 0;
      private java.lang.Object method_;
      public MethodCase
          getMethodCase() {
        return MethodCase.forNumber(
            methodCase_);
      }

      public Builder clearMethod() {
        methodCase_ = 0;
        method_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder> existsBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       * @return Whether the exists field is set.
       */
      @java.lang.Override
      public boolean hasExists() {
        return methodCase_ == 1;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       * @return The exists.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getExists() {
        if (existsBuilder_ == null) {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        } else {
          if (methodCase_ == 1) {
            return existsBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       */
      public Builder setExists(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists value) {
        if (existsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          existsBuilder_.setMessage(value);
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       */
      public Builder setExists(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder builderForValue) {
        if (existsBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          existsBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       */
      public Builder mergeExists(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists value) {
        if (existsBuilder_ == null) {
          if (methodCase_ == 1 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 1) {
            existsBuilder_.mergeFrom(value);
          } else {
            existsBuilder_.setMessage(value);
          }
        }
        methodCase_ = 1;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       */
      public Builder clearExists() {
        if (existsBuilder_ == null) {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 1) {
            methodCase_ = 0;
            method_ = null;
          }
          existsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder getExistsBuilder() {
        return getExistsFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder getExistsOrBuilder() {
        if ((methodCase_ == 1) && (existsBuilder_ != null)) {
          return existsBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 1) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Exists exists = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder> 
          getExistsFieldBuilder() {
        if (existsBuilder_ == null) {
          if (!(methodCase_ == 1)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
          }
          existsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Exists, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 1;
        onChanged();
        return existsBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder> getBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       * @return Whether the get field is set.
       */
      @java.lang.Override
      public boolean hasGet() {
        return methodCase_ == 2;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       * @return The get.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getGet() {
        if (getBuilder_ == null) {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        } else {
          if (methodCase_ == 2) {
            return getBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       */
      public Builder setGet(org.apache.spark.sql.execution.streaming.state.StateMessage.Get value) {
        if (getBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          getBuilder_.setMessage(value);
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       */
      public Builder setGet(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder builderForValue) {
        if (getBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          getBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       */
      public Builder mergeGet(org.apache.spark.sql.execution.streaming.state.StateMessage.Get value) {
        if (getBuilder_ == null) {
          if (methodCase_ == 2 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Get.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 2) {
            getBuilder_.mergeFrom(value);
          } else {
            getBuilder_.setMessage(value);
          }
        }
        methodCase_ = 2;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       */
      public Builder clearGet() {
        if (getBuilder_ == null) {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 2) {
            methodCase_ = 0;
            method_ = null;
          }
          getBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder getGetBuilder() {
        return getGetFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder getGetOrBuilder() {
        if ((methodCase_ == 2) && (getBuilder_ != null)) {
          return getBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 2) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Get get = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder> 
          getGetFieldBuilder() {
        if (getBuilder_ == null) {
          if (!(methodCase_ == 2)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
          }
          getBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Get, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 2;
        onChanged();
        return getBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Update, org.apache.spark.sql.execution.streaming.state.StateMessage.Update.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.UpdateOrBuilder> updateBuilder_;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       * @return Whether the update field is set.
       */
      @java.lang.Override
      public boolean hasUpdate() {
        return methodCase_ == 3;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       * @return The update.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Update getUpdate() {
        if (updateBuilder_ == null) {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance();
        } else {
          if (methodCase_ == 3) {
            return updateBuilder_.getMessage();
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       */
      public Builder setUpdate(org.apache.spark.sql.execution.streaming.state.StateMessage.Update value) {
        if (updateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          method_ = value;
          onChanged();
        } else {
          updateBuilder_.setMessage(value);
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       */
      public Builder setUpdate(
          org.apache.spark.sql.execution.streaming.state.StateMessage.Update.Builder builderForValue) {
        if (updateBuilder_ == null) {
          method_ = builderForValue.build();
          onChanged();
        } else {
          updateBuilder_.setMessage(builderForValue.build());
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       */
      public Builder mergeUpdate(org.apache.spark.sql.execution.streaming.state.StateMessage.Update value) {
        if (updateBuilder_ == null) {
          if (methodCase_ == 3 &&
              method_ != org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance()) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Update.newBuilder((org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_)
                .mergeFrom(value).buildPartial();
          } else {
            method_ = value;
          }
          onChanged();
        } else {
          if (methodCase_ == 3) {
            updateBuilder_.mergeFrom(value);
          } else {
            updateBuilder_.setMessage(value);
          }
        }
        methodCase_ = 3;
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       */
      public Builder clearUpdate() {
        if (updateBuilder_ == null) {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
            onChanged();
          }
        } else {
          if (methodCase_ == 3) {
            methodCase_ = 0;
            method_ = null;
          }
          updateBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       */
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Update.Builder getUpdateBuilder() {
        return getUpdateFieldBuilder().getBuilder();
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.UpdateOrBuilder getUpdateOrBuilder() {
        if ((methodCase_ == 3) && (updateBuilder_ != null)) {
          return updateBuilder_.getMessageOrBuilder();
        } else {
          if (methodCase_ == 3) {
            return (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_;
          }
          return org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance();
        }
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.Update update = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.apache.spark.sql.execution.streaming.state.StateMessage.Update, org.apache.spark.sql.execution.streaming.state.StateMessage.Update.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.UpdateOrBuilder> 
          getUpdateFieldBuilder() {
        if (updateBuilder_ == null) {
          if (!(methodCase_ == 3)) {
            method_ = org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance();
          }
          updateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.apache.spark.sql.execution.streaming.state.StateMessage.Update, org.apache.spark.sql.execution.streaming.state.StateMessage.Update.Builder, org.apache.spark.sql.execution.streaming.state.StateMessage.UpdateOrBuilder>(
                  (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) method_,
                  getParentForChildren(),
                  isClean());
          method_ = null;
        }
        methodCase_ = 3;
        onChanged();
        return updateBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.ListStateCall)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.ListStateCall)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ListStateCall>
        PARSER = new com.google.protobuf.AbstractParser<ListStateCall>() {
      @java.lang.Override
      public ListStateCall parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ListStateCall> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ListStateCall> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.ListStateCall getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExistsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.Exists)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Exists}
   */
  public static final class Exists extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.Exists)
      ExistsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Exists.newBuilder() to construct.
    private Exists(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Exists() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Exists();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Exists)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.Exists other = (org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Exists}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.Exists)
        org.apache.spark.sql.execution.streaming.state.StateMessage.ExistsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Exists result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Exists result = new org.apache.spark.sql.execution.streaming.state.StateMessage.Exists(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Exists) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.Exists)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.Exists other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.Exists.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.Exists)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.Exists)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.Exists DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.Exists();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Exists>
        PARSER = new com.google.protobuf.AbstractParser<Exists>() {
      @java.lang.Override
      public Exists parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Exists> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Exists> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Exists getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.Get)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Get}
   */
  public static final class Get extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.Get)
      GetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Get.newBuilder() to construct.
    private Get(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Get() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Get();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.Get.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Get)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.Get other = (org.apache.spark.sql.execution.streaming.state.StateMessage.Get) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.Get prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Get}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.Get)
        org.apache.spark.sql.execution.streaming.state.StateMessage.GetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.Get.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Get.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.Get.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Get result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Get buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Get result = new org.apache.spark.sql.execution.streaming.state.StateMessage.Get(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Get) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.Get)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.Get other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.Get.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.Get)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.Get)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.Get DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.Get();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Get getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Get>
        PARSER = new com.google.protobuf.AbstractParser<Get>() {
      @java.lang.Override
      public Get parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Get> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Get> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Get getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.Update)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Update}
   */
  public static final class Update extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.Update)
      UpdateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Update.newBuilder() to construct.
    private Update(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Update() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Update();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Update_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Update_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.Update.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Update.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Update)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.Update other = (org.apache.spark.sql.execution.streaming.state.StateMessage.Update) obj;

      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.Update prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.Update}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.Update)
        org.apache.spark.sql.execution.streaming.state.StateMessage.UpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Update_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Update_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.Update.class, org.apache.spark.sql.execution.streaming.state.StateMessage.Update.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.Update.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_Update_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Update getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Update build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Update result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.Update buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.Update result = new org.apache.spark.sql.execution.streaming.state.StateMessage.Update(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.Update) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.Update)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.Update other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.Update.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.Update)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.Update)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.Update DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.Update();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.Update getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Update>
        PARSER = new com.google.protobuf.AbstractParser<Update>() {
      @java.lang.Override
      public Update parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Update> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Update> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.Update getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SetHandleStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.apache.spark.sql.execution.streaming.state.SetHandleState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The enum numeric value on the wire for state.
     */
    int getStateValue();
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The state.
     */
    org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState getState();
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.SetHandleState}
   */
  public static final class SetHandleState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:org.apache.spark.sql.execution.streaming.state.SetHandleState)
      SetHandleStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SetHandleState.newBuilder() to construct.
    private SetHandleState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SetHandleState() {
      state_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SetHandleState();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.class, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder.class);
    }

    public static final int STATE_FIELD_NUMBER = 1;
    private int state_ = 0;
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The enum numeric value on the wire for state.
     */
    @java.lang.Override public int getStateValue() {
      return state_;
    }
    /**
     * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
     * @return The state.
     */
    @java.lang.Override public org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState getState() {
      org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState result = org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.forNumber(state_);
      return result == null ? org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (state_ != org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.CREATED.getNumber()) {
        output.writeEnum(1, state_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (state_ != org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.CREATED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState)) {
        return super.equals(obj);
      }
      org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState other = (org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) obj;

      if (state_ != other.state_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STATE_FIELD_NUMBER;
      hash = (53 * hash) + state_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.apache.spark.sql.execution.streaming.state.SetHandleState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.execution.streaming.state.SetHandleState)
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.class, org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.Builder.class);
      }

      // Construct using org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        state_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getDefaultInstanceForType() {
        return org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance();
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState build() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState buildPartial() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState result = new org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.state_ = state_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState) {
          return mergeFrom((org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState other) {
        if (other == org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState.getDefaultInstance()) return this;
        if (other.state_ != 0) {
          setStateValue(other.getStateValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                state_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int state_ = 0;
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @return The enum numeric value on the wire for state.
       */
      @java.lang.Override public int getStateValue() {
        return state_;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @param value The enum numeric value on the wire for state to set.
       * @return This builder for chaining.
       */
      public Builder setStateValue(int value) {
        state_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @return The state.
       */
      @java.lang.Override
      public org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState getState() {
        org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState result = org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.forNumber(state_);
        return result == null ? org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState.UNRECOGNIZED : result;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @param value The state to set.
       * @return This builder for chaining.
       */
      public Builder setState(org.apache.spark.sql.execution.streaming.state.StateMessage.HandleState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.org.apache.spark.sql.execution.streaming.state.HandleState state = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.execution.streaming.state.SetHandleState)
    }

    // @@protoc_insertion_point(class_scope:org.apache.spark.sql.execution.streaming.state.SetHandleState)
    private static final org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState();
    }

    public static org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SetHandleState>
        PARSER = new com.google.protobuf.AbstractParser<SetHandleState>() {
      @java.lang.Override
      public SetHandleState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SetHandleState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SetHandleState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.apache.spark.sql.execution.streaming.state.StateMessage.SetHandleState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_Update_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_Update_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n;org/apache/spark/sql/execution/streami" +
      "ng/StateMessage.proto\022.org.apache.spark." +
      "sql.execution.streaming.state\"\365\001\n\014StateR" +
      "equest\022\017\n\007version\030\001 \001(\005\022r\n\033statefulProce" +
      "ssorHandleCall\030\002 \001(\0132K.org.apache.spark." +
      "sql.execution.streaming.state.StatefulPr" +
      "ocessorHandleCallH\000\022V\n\rlistStateCall\030\003 \001" +
      "(\0132=.org.apache.spark.sql.execution.stre" +
      "aming.state.ListStateCallH\000B\010\n\006method\"9\n" +
      "\rStateResponse\022\022\n\nstatusCode\030\001 \001(\005\022\024\n\014er" +
      "rorMessage\030\002 \001(\t\"\327\001\n\033StatefulProcessorHa" +
      "ndleCall\022X\n\016setHandleState\030\002 \001(\0132>.org.a" +
      "pache.spark.sql.execution.streaming.stat" +
      "e.SetHandleStateH\000\022T\n\014getListState\030\003 \001(\013" +
      "2<.org.apache.spark.sql.execution.stream" +
      "ing.state.GetListStateH\000B\010\n\006method\"1\n\014Ge" +
      "tListState\022\021\n\tstateName\030\001 \001(\t\022\016\n\006schema\030" +
      "\002 \001(\t\"\361\001\n\rListStateCall\022H\n\006exists\030\001 \001(\0132" +
      "6.org.apache.spark.sql.execution.streami" +
      "ng.state.ExistsH\000\022B\n\003get\030\002 \001(\01323.org.apa" +
      "che.spark.sql.execution.streaming.state." +
      "GetH\000\022H\n\006update\030\003 \001(\01326.org.apache.spark" +
      ".sql.execution.streaming.state.UpdateH\000B" +
      "\010\n\006method\"\010\n\006Exists\"\005\n\003Get\"\010\n\006Update\"\\\n\016" +
      "SetHandleState\022J\n\005state\030\001 \001(\0162;.org.apac" +
      "he.spark.sql.execution.streaming.state.H" +
      "andleState*K\n\013HandleState\022\013\n\007CREATED\020\000\022\017" +
      "\n\013INITIALIZED\020\001\022\022\n\016DATA_PROCESSED\020\002\022\n\n\006C" +
      "LOSED\020\003b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StateRequest_descriptor,
        new java.lang.String[] { "Version", "StatefulProcessorHandleCall", "ListStateCall", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StateResponse_descriptor,
        new java.lang.String[] { "StatusCode", "ErrorMessage", });
    internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_StatefulProcessorHandleCall_descriptor,
        new java.lang.String[] { "SetHandleState", "GetListState", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_GetListState_descriptor,
        new java.lang.String[] { "StateName", "Schema", });
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_ListStateCall_descriptor,
        new java.lang.String[] { "Exists", "Get", "Update", "Method", });
    internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_org_apache_spark_sql_execution_streaming_state_Exists_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_Exists_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_org_apache_spark_sql_execution_streaming_state_Get_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_Get_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_Update_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_org_apache_spark_sql_execution_streaming_state_Update_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_Update_descriptor,
        new java.lang.String[] { });
    internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_org_apache_spark_sql_execution_streaming_state_SetHandleState_descriptor,
        new java.lang.String[] { "State", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
